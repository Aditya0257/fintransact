version: "3.5"

services:
  user-app:
    build:
      context: .
      dockerfile: apps/user-app/Dockerfile
    container_name: user_app
    ports:
      - "4004:4004"
    volumes:
      # - ./packages/db:/app/packages/db
      # - ./packages/ui:/app/packages/ui
      - ./packages:/app/packages
      - ./apps/user-app:/app/apps/user-app
    environment:
      - NEXTAUTH_SECRET=<your jwt secret key>
      - NEXTAUTH_URL=http://localhost:4004
      - JWT_SECRET=myjwtsecret
    command: ["npm", "run", "dev"]

  merchant-app:
    build:
      context: .
      dockerfile: apps/merchant-app/Dockerfile
    container_name: merchant_app
    ports:
      - "4008:4008"
    volumes:
     # - ./packages/db:/app/packages/db
      # - ./packages/ui:/app/packages/ui
      - ./packages:/app/packages
      - ./apps/merchant-app:/app/apps/merchant-app
    environment:
      - GOOGLE_CLIENT_ID=""
      - GOOGLE_CLIENT_SECRET=""
      - GITHUB_ID=""
      - GITHUB_SECRET=""
      - NEXTAUTH_URL=http://localhost:4008
      - NEXTAUTH_SECRET=<your merchant app jwt secret key>
    command: ["npm", "run", "dev"]

  bank-webhook:
    build:
      context: .
      dockerfile: apps/bank-webhook/Dockerfile
    container_name: bank_webhook
    ports:
      - "4000:4000"
    volumes:
      # - ./packages/db:/app/packages/db
      # - ./packages/ui:/app/packages/ui
      - ./packages:/app/packages
      - ./apps/bank-webhook:/app/apps/bank-webhook
    environment:
      - BWS_TOKEN_VAL=mybwstoken
    command: ["npm", "run", "dev"]

  bankservice-app:
    build:
      context: .
      dockerfile: apps/bankservice-app/Dockerfile
    container_name: bankservice_app
    ports:
      - "5173:5173"
    volumes:
      # - ./packages/db:/app/packages/db
      # - ./packages/ui:/app/packages/ui
      - ./packages:/app/packages
      - ./apps/bankservice-app:/app/apps/bankservice-app
    environment:
      - BWS_TOKEN_VAL=mybwstoken
      - FINTRANSACT_FRONTEND_URL=http://localhost:4004
      - WEBHOOK_BACKEND_URL=http://localhost:4000
    command: ["npm", "run", "dev"]

  prisma-client-service:
    build:
      context: .
      dockerfile: packages/db/Dockerfile.prisma-client-service
    container_name: prisma_client_service
    volumes:
      - ./packages/db:/app/packages/db
    command: ["sh", "-c", "echo Prisma client ready"]

  db:
    image: postgres:alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    external: false
