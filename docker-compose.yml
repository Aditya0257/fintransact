version: "3.5"

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fintransact_app
    ports:
      - "5173:5173"   # For bankservice-app (frontend)
      - "4004:4004"   # For user-app (backend)
      - "4008:4008"   # For merchant-app (backend)
      - "4000:4000"   # For bank-webhook (backend)
    volumes:
      - ./apps/user-app:/app/apps/user-app              # Mount the user-app for live updates
      - ./apps/merchant-app:/app/apps/merchant-app      # Mount the merchant-app for live updates
      - ./apps/bank-webhook:/app/apps/bank-webhook      # Mount the bank-webhook app for live updates
      - ./apps/bankservice-app:/app/apps/bankservice-app # Mount the bankservice-app for live updates
      - /app/node_modules                               # Avoid mounting node_modules
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/postgres
      - NEXTAUTH_SECRET=userjwtsecret                   # For user-app
      - NEXTAUTH_URL=http://localhost:4004              # For user-app
      - JWT_SECRET=myjwtsecret                          # For user-app
      - GOOGLE_CLIENT_ID=""
      - GOOGLE_CLIENT_SECRET=""
      - GITHUB_ID=""
      - GITHUB_SECRET=""
      - NEXTAUTH_SECRET=<your merchant app jwt secret key>  # For merchant-app
      - NEXTAUTH_URL=http://localhost:4008                  # For merchant-app
      - BWS_TOKEN_VAL=mybwstoken                            # For bank-webhook and bankservice-app
      - FINTRANSACT_FRONTEND_URL=http://localhost:5173      # For bankservice-app
      - WEBHOOK_BACKEND_URL=http://localhost:4000           # For bankservice-app
    # command: ["npm", "run", "dev"]  # Start all apps

  db:
    image: postgres:alpine
    container_name: db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
    external: false
